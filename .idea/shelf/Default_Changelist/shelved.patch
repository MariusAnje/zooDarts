Index: Interface/explore_conv_dconv.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from torchvision import models\n\nfrom torchvision.models import *\nfrom torch import nn\nimport torch\nimport sys\nimport math\nsys.path.append(\"../Performance_Model\")\nimport PM_Config\nimport PM_Layer\nimport PM_FPGA_Template\nfrom search_space import *\nfrom CONV_PM_IF import *\nimport argparse\nimport copy\n\n\n\ndef get_max_k_d(model):\n    max_k,d_max_k = 0,0\n    for layer_name, layer in model.named_modules():\n        if isinstance(layer, nn.Conv2d):\n            if (tell_conv_type(layer.in_channels,layer.groups)==\"cconv\"):\n                cur_k = is_same(layer.kernel_size)\n                if cur_k > max_k:\n                    max_k = cur_k\n            else:\n                cur_k = is_same(layer.kernel_size)\n                if cur_k > d_max_k:\n                    d_max_k = cur_k\n\n    return  max_k,d_max_k\n\ndef get_performance(model, HW1, HW2):\n    input = torch.Tensor(torch.Size([1, 3, 224, 224])).to(torch.float32)\n    cTT = 0\n    dTT = 0\n    for layer_name, layer in model.named_modules():\n        if isinstance(layer, nn.Conv2d):\n            input_shape = list(input.shape)\n            input_shape[1] = layer.in_channels\n            input = torch.Tensor(torch.Size(input_shape)).to(torch.float32)\n            input = layer(input)\n\n\n\n\n            [B, M, N, R, C, K, S, T, P] = (\n                1, layer.out_channels, layer.in_channels, input.shape[2], input.shape[3], is_same(layer.kernel_size),\n                is_same(layer.stride), tell_conv_type(layer.in_channels, layer.groups), is_same(layer.padding))\n\n            if T == \"cconv\":\n                [Tm, Tn, Tr, Tc, Tk, W_p, I_p, O_p] = HW2\n                [r_Ports, r_DSP, r_BRAM, r_BRAM_Size, BITWIDTH] = (\n                                            HW_constraints[\"r_Ports_BW\"], HW_constraints[\"r_DSP\"],\n                                            HW_constraints[\"r_BRAM_Size\"], HW_constraints[\"r_BRAM\"],\n                                            HW_constraints[\"BITWIDTH\"])\n                Layer = PM_Layer.Layer_Class(B, M, N, R, C, K, S, \"cconv\", P)\n                acc_1 = PM_FPGA_Template.FPGA_Templates(Tm, Tn, Tr, Tc,\n                                                        Tk, W_p, I_p, O_p, \"cconv\", r_Ports, r_DSP, r_BRAM, r_BRAM_Size,\n                                                        BITWIDTH)\n                if acc_1.Success:\n                    cTT += acc_1.get_layer_latency(Layer)[0]\n                else:\n                    return -1\n            elif T == \"dconv\":\n                [Tm, Tn, Tr, Tc, Tk, W_p, I_p, O_p] = HW1\n                [r_Ports, r_DSP, r_BRAM, r_BRAM_Size, BITWIDTH] = (\n                                            HW_constraints[\"r_Ports_BW\"], HW_constraints[\"r_DSP\"],\n                                            HW_constraints[\"r_BRAM_Size\"], HW_constraints[\"r_BRAM\"],\n                                            HW_constraints[\"BITWIDTH\"])\n                Layer = PM_Layer.Layer_Class(B, M, N, R, C, K, S, \"dconv\", P)\n                acc_2 = PM_FPGA_Template.FPGA_Templates(Tm, Tn, Tr, Tc,\n                                                        Tk, W_p, I_p, O_p, \"dconv\", r_Ports, r_DSP, r_BRAM, r_BRAM_Size,\n                                                        BITWIDTH)\n\n                dTT += acc_2.get_layer_latency(Layer)[0]\n\n        elif isinstance(layer, nn.MaxPool2d) or isinstance(layer, nn.AdaptiveAvgPool2d) or isinstance(layer,\n                                                                                                      nn.AvgPool2d):\n            input = layer(input)\n\n    return (cTT+dTT) / 10 ** 5\n\n\n\ndef do_exploration(model):\n    (rangeTm,rangeTc,rangeTr,range_Wp,range_Ip,range_Op) = search_space['hw_cd_cconv']\n    (d_rangeTm, d_rangeTc, d_rangeTr) = search_space['hw_cd_dconv']\n\n    best_lat = 999999999999\n    best_design = []\n    Tk,d_Tk = get_max_k_d(model)\n\n\n    for W_p in range_Wp:\n        for I_p in range_Ip:\n            for O_p in range_Op:\n                if (W_p+I_p+O_p)*HW_constraints[\"BITWIDTH\"] > HW_constraints[\"r_Ports_BW\"]:\n                    continue\n\n                for d_Tm in d_rangeTm:\n                    d_Tn = 1\n                    for Tm in rangeTm:\n                        Tn = math.floor((HW_constraints[\"r_DSP\"]-d_Tm) / Tm)\n                        if HW_constraints[\"BITWIDTH\"] == 16 and d_Tm + Tm*Tn > HW_constraints[\"r_DSP\"]:\n                            continue\n                        elif HW_constraints[\"BITWIDTH\"] == 32 and 5*(d_Tm + Tm*Tn) > HW_constraints[\"r_DSP\"]:\n                            continue\n\n                        for d_Tc in d_rangeTc:\n                            for d_Tr in d_rangeTr:\n                                HW1 = [d_Tm, d_Tn, d_Tr, d_Tc, d_Tk, W_p, I_p, O_p]\n                                for Tc in rangeTc:\n                                    for Tr in rangeTr:\n                                        HW2 = [Tm, Tn, Tr, Tc, Tk, W_p, I_p, O_p]\n                                        cur_lat = get_performance(model, HW1,HW2)\n                                        print(\"==\",HW1,HW2,cur_lat)\n                                        # print(\"'\", Tm, Tn, Tr, Tc, Tk, W_p, I_p, O_p, \"':\", cur_lat,best_lat)\n                                        if cur_lat!=-1 and cur_lat<best_lat:\n                                            best_lat = cur_lat\n                                            best_design = [copy.deepcopy(HW1),copy.deepcopy(HW2)]\n    return best_lat,best_design\n\n\n\nif __name__== \"__main__\":\n\n    parser = argparse.ArgumentParser('Parser User Input Arguments')\n    parser.add_argument(\n        '-m', '--model',\n        default='mnasnet0_5'\n    )\n    args = parser.parse_args()\n    model_name = args.model\n    model = globals()[model_name]()\n\n    best_lat,best_design = do_exploration(model)\n\n    print(model_name, best_lat,best_design)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Interface/explore_conv_dconv.py	(revision 32d34cb6ce253fc44553f8a9772a178761267d0e)
+++ Interface/explore_conv_dconv.py	(date 1585404996061)
@@ -13,7 +13,7 @@
 from CONV_PM_IF import *
 import argparse
 import copy
-
+import time
 
 
 def get_max_k_d(model):
@@ -135,6 +135,9 @@
     model_name = args.model
     model = globals()[model_name]()
 
+    start_time = time.time()
     best_lat,best_design = do_exploration(model)
 
-    print(model_name, best_lat,best_design)
+    end_time = time.time()
+
+    print(model_name, best_lat,best_design, (end_time - start_time))
